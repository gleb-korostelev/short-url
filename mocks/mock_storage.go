// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/service.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	models "github.com/gleb-korostelev/short-url.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// GetAllURLS mocks base method.
func (m *MockStorage) GetAllURLS(ctx context.Context, userID, baseURL string) ([]models.UserURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURLS", ctx, userID, baseURL)
	ret0, _ := ret[0].([]models.UserURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllURLS indicates an expected call of GetAllURLS.
func (mr *MockStorageMockRecorder) GetAllURLS(ctx, userID, baseURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURLS", reflect.TypeOf((*MockStorage)(nil).GetAllURLS), ctx, userID, baseURL)
}

// GetOriginalLink mocks base method.
func (m *MockStorage) GetOriginalLink(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalLink", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalLink indicates an expected call of GetOriginalLink.
func (mr *MockStorageMockRecorder) GetOriginalLink(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalLink", reflect.TypeOf((*MockStorage)(nil).GetOriginalLink), ctx, shortURL)
}

// MarkURLsAsDeleted mocks base method.
func (m *MockStorage) MarkURLsAsDeleted(ctx context.Context, userID string, shortURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkURLsAsDeleted", ctx, userID, shortURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkURLsAsDeleted indicates an expected call of MarkURLsAsDeleted.
func (mr *MockStorageMockRecorder) MarkURLsAsDeleted(ctx, userID, shortURLs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkURLsAsDeleted", reflect.TypeOf((*MockStorage)(nil).MarkURLsAsDeleted), ctx, userID, shortURLs)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// SaveURL mocks base method.
func (m *MockStorage) SaveURL(ctx context.Context, originalURL, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, originalURL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockStorageMockRecorder) SaveURL(ctx, originalURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockStorage)(nil).SaveURL), ctx, originalURL, userID)
}

// SaveUniqueURL mocks base method.
func (m *MockStorage) SaveUniqueURL(ctx context.Context, originalURL, userID string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUniqueURL", ctx, originalURL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SaveUniqueURL indicates an expected call of SaveUniqueURL.
func (mr *MockStorageMockRecorder) SaveUniqueURL(ctx, originalURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUniqueURL", reflect.TypeOf((*MockStorage)(nil).SaveUniqueURL), ctx, originalURL, userID)
}
