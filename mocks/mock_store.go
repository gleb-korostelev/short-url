// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/service.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockDatabaseI is a mock of DatabaseI interface.
type MockDatabaseI struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseIMockRecorder
}

// MockDatabaseIMockRecorder is the mock recorder for MockDatabaseI.
type MockDatabaseIMockRecorder struct {
	mock *MockDatabaseI
}

// NewMockDatabaseI creates a new mock instance.
func NewMockDatabaseI(ctrl *gomock.Controller) *MockDatabaseI {
	mock := &MockDatabaseI{ctrl: ctrl}
	mock.recorder = &MockDatabaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseI) EXPECT() *MockDatabaseIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseI)(nil).Close))
}

// Exec mocks base method.
func (m *MockDatabaseI) Exec(ctx context.Context, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDatabaseIMockRecorder) Exec(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabaseI)(nil).Exec), varargs...)
}

// GetConn mocks base method.
func (m *MockDatabaseI) GetConn(ctx context.Context) *pgx.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", ctx)
	ret0, _ := ret[0].(*pgx.Conn)
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockDatabaseIMockRecorder) GetConn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockDatabaseI)(nil).GetConn), ctx)
}

// Ping mocks base method.
func (m *MockDatabaseI) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseIMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabaseI)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockDatabaseI) Query(ctx context.Context, query string, args ...interface{}) pgx.Rows {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockDatabaseIMockRecorder) Query(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabaseI)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockDatabaseI) QueryRow(ctx context.Context, query string, args ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDatabaseIMockRecorder) QueryRow(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDatabaseI)(nil).QueryRow), varargs...)
}
